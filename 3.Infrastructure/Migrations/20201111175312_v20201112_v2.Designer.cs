// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PT.Infrastructure;

namespace PT.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20201111175312_v20201112_v2")]
    partial class v20201112_v2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim","adm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim","adm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin","adm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole","adm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken","adm");
                });

            modelBuilder.Entity("PT.Domain.Model.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role","adm");
                });

            modelBuilder.Entity("PT.Domain.Model.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime?>("ExpirationResetPassword");

                    b.Property<DateTime?>("ExpirationWrongPassword");

                    b.Property<bool>("IsLock");

                    b.Property<bool>("IsReLogin");

                    b.Property<bool>("IsSuperAdmin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Note");

                    b.Property<string>("NoteLock")
                        .HasMaxLength(1000);

                    b.Property<int?>("NumberWrongPasswords");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int?>("UpdatedUserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User","adm");
                });

            modelBuilder.Entity("PT.Domain.Model.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassActive");

                    b.Property<bool>("Delete");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.Property<string>("Template");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("PT.Domain.Model.BannerItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Banner");

                    b.Property<int>("BannerId");

                    b.Property<string>("Content");

                    b.Property<string>("Href");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<bool>("Status");

                    b.Property<string>("Target");

                    b.Property<string>("Template");

                    b.HasKey("Id");

                    b.ToTable("BannerItem");
                });

            modelBuilder.Entity("PT.Domain.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Banner");

                    b.Property<string>("Banner2");

                    b.Property<string>("Content");

                    b.Property<bool>("Delete");

                    b.Property<bool>("IsHome");

                    b.Property<string>("Language")
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("ParentId");

                    b.Property<bool>("Status");

                    b.Property<string>("Summary");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Type", "Delete", "Status", "Language");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("PT.Domain.Model.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<DateTime?>("AppointmentDate");

                    b.Property<DateTime?>("AppointmentDateTo");

                    b.Property<int>("AppointmentStatus");

                    b.Property<string>("Avatar");

                    b.Property<string>("Content");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("Delete");

                    b.Property<string>("Email");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsHome");

                    b.Property<string>("Language")
                        .HasMaxLength(10);

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneCode");

                    b.Property<double>("Rating");

                    b.Property<int>("ServiceId");

                    b.Property<bool>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Type", "Delete", "Status", "Language", "IsHome");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("PT.Domain.Model.ContentPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<string>("Banner")
                        .HasMaxLength(1000);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("DatePosted");

                    b.Property<bool>("Delete");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsHome");

                    b.Property<string>("Language")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasMaxLength(1000);

                    b.Property<double?>("Price");

                    b.Property<int>("ServiceId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<bool>("Status");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Type", "Delete", "Status", "Language", "DatePosted");

                    b.ToTable("ContentPage");
                });

            modelBuilder.Entity("PT.Domain.Model.ContentPageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("ContentPageId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "ContentPageId");

                    b.ToTable("ContentPageCategory");
                });

            modelBuilder.Entity("PT.Domain.Model.ContentPageReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentPageId");

                    b.Property<string>("Href");

                    b.Property<string>("Name");

                    b.Property<string>("Rel");

                    b.Property<string>("Target");

                    b.HasKey("Id");

                    b.HasIndex("ContentPageId");

                    b.ToTable("ContentPageReference");
                });

            modelBuilder.Entity("PT.Domain.Model.ContentPageRelated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentPageId");

                    b.Property<int>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ContentPageId");

                    b.ToTable("ContentPageRelated");
                });

            modelBuilder.Entity("PT.Domain.Model.ContentPageTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentPageId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("ContentPageId");

                    b.ToTable("ContentPageTag");
                });

            modelBuilder.Entity("PT.Domain.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("PhoneCode");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("PT.Domain.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Banner");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("Content");

                    b.Property<string>("Country");

                    b.Property<bool>("Delete");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<int>("Gender");

                    b.Property<string>("Phone");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Delete", "Status");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("PT.Domain.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Banner");

                    b.Property<string>("Content");

                    b.Property<string>("Degrees");

                    b.Property<bool>("Delete");

                    b.Property<string>("Email");

                    b.Property<int>("EmployeeMappingId");

                    b.Property<bool>("Endodontics");

                    b.Property<string>("Facebook");

                    b.Property<string>("FullName");

                    b.Property<int>("Gender");

                    b.Property<bool>("GeneralDentistry");

                    b.Property<int>("Job");

                    b.Property<string>("Language")
                        .HasMaxLength(10);

                    b.Property<string>("Office");

                    b.Property<bool>("OralMedicine");

                    b.Property<bool>("OralSurgery");

                    b.Property<bool>("Orthodontics");

                    b.Property<bool>("Periodontics");

                    b.Property<string>("Phone");

                    b.Property<bool>("Prosthodontics");

                    b.Property<bool>("Status");

                    b.Property<string>("Summary");

                    b.HasKey("Id");

                    b.HasIndex("Delete", "Status", "Language");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("PT.Domain.Model.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Image1");

                    b.Property<string>("Image2");

                    b.Property<int>("ImageGalleryId");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Status", "ImageGalleryId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("PT.Domain.Model.ImageGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("Description");

                    b.Property<string>("Keywords");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("Delete", "Status");

                    b.ToTable("ImageGallery");
                });

            modelBuilder.Entity("PT.Domain.Model.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Changefreq")
                        .HasMaxLength(10);

                    b.Property<bool>("Delete");

                    b.Property<string>("Description");

                    b.Property<string>("FacebookBanner");

                    b.Property<string>("FacebookDescription");

                    b.Property<string>("FocusKeywords");

                    b.Property<string>("GooglePlusDescription");

                    b.Property<bool>("IncludeSitemap");

                    b.Property<bool>("IsStatic");

                    b.Property<string>("Keywords");

                    b.Property<string>("Language")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Lastmod");

                    b.Property<string>("MetaRobotsAdvance");

                    b.Property<string>("MetaRobotsFollow");

                    b.Property<string>("MetaRobotsIndex");

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.Property<double>("Priority");

                    b.Property<string>("Redirect301");

                    b.Property<string>("Slug");

                    b.Property<bool>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Type", "Delete", "Status", "Language", "ObjectId", "IsStatic", "IncludeSitemap");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("PT.Domain.Model.LinkReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Language");

                    b.Property<int>("LinkId1");

                    b.Property<int>("LinkId2");

                    b.HasKey("Id");

                    b.ToTable("LinkReference");
                });

            modelBuilder.Entity("PT.Domain.Model.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcctionUser");

                    b.Property<DateTime>("ActionTime");

                    b.Property<string>("Name");

                    b.Property<string>("Object")
                        .HasMaxLength(50);

                    b.Property<int>("ObjectId");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(50);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Type", "ObjectType", "ActionTime");

                    b.ToTable("Log","adm");
                });

            modelBuilder.Entity("PT.Domain.Model.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Delete");

                    b.Property<string>("HasChildrentClass1");

                    b.Property<string>("HasChildrentClass2");

                    b.Property<string>("HasChildrentClass3");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.Property<string>("Template");

                    b.Property<string>("Template1");

                    b.Property<string>("Template2");

                    b.Property<string>("Template3");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("PT.Domain.Model.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class");

                    b.Property<string>("Href");

                    b.Property<string>("Icon");

                    b.Property<int>("MenuId");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("ParentId");

                    b.Property<bool>("Status");

                    b.Property<string>("Target");

                    b.HasKey("Id");

                    b.ToTable("MenuItem");
                });

            modelBuilder.Entity("PT.Domain.Model.RedirectLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<string>("From");

                    b.Property<string>("To");

                    b.HasKey("Id");

                    b.ToTable("RedirectLink");
                });

            modelBuilder.Entity("PT.Domain.Model.RoleAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasMaxLength(500);

                    b.Property<string>("ControllerId")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("Order");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.ToTable("RoleAction","adm");
                });

            modelBuilder.Entity("PT.Domain.Model.RoleArea", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<int>("Order");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("RoleArea","adm");
                });

            modelBuilder.Entity("PT.Domain.Model.RoleController", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("AreaId");

                    b.Property<int>("GroupId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("Order");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("GroupId");

                    b.ToTable("RoleController","adm");
                });

            modelBuilder.Entity("PT.Domain.Model.RoleDetail", b =>
                {
                    b.Property<int>("ActionId");

                    b.Property<int>("RoleId");

                    b.HasKey("ActionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleDetail","adm");
                });

            modelBuilder.Entity("PT.Domain.Model.RoleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<int>("Order");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("RoleGroup","adm");
                });

            modelBuilder.Entity("PT.Domain.Model.ServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<bool?>("ContactPrice");

                    b.Property<bool>("Delete");

                    b.Property<long>("FromPrice");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("ParentId");

                    b.Property<bool>("Status");

                    b.Property<bool?>("SubParent");

                    b.Property<long?>("ToPrice");

                    b.Property<string>("Type");

                    b.Property<int>("Unit");

                    b.Property<int>("Visits");

                    b.HasKey("Id");

                    b.HasIndex("Delete", "Status");

                    b.ToTable("ServicePrice");
                });

            modelBuilder.Entity("PT.Domain.Model.StaticInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<bool>("Delete");

                    b.Property<string>("Language")
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.Property<int>("ParentId");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Delete", "Status");

                    b.ToTable("StaticInformation");
                });

            modelBuilder.Entity("PT.Domain.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Banner");

                    b.Property<string>("Content");

                    b.Property<bool>("Delete");

                    b.Property<string>("Language")
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Delete", "Status", "Language");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("PT.Domain.Model.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Banner");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CreatedUser");

                    b.Property<int>("Days");

                    b.Property<string>("DetailDifference");

                    b.Property<string>("DetailNote");

                    b.Property<string>("DetailServicesExclusion");

                    b.Property<string>("DetailServicesInclusion");

                    b.Property<bool>("IsTop");

                    b.Property<string>("Language")
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.Property<int>("Nights");

                    b.Property<string>("Overview");

                    b.Property<string>("Photos");

                    b.Property<bool>("Status");

                    b.Property<int>("Style");

                    b.Property<string>("Summary");

                    b.Property<int>("TourType");

                    b.Property<string>("Trips");

                    b.HasKey("Id");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("PT.Domain.Model.TourCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.ToTable("TourCategory");
                });

            modelBuilder.Entity("PT.Domain.Model.TourDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day");

                    b.Property<string>("Details");

                    b.Property<bool>("IsCar");

                    b.Property<bool>("IsCruising");

                    b.Property<bool>("IsCycling");

                    b.Property<bool>("IsFlight");

                    b.Property<bool>("IsHotel");

                    b.Property<bool>("IsLocalBoat");

                    b.Property<bool>("IsLocalTouch");

                    b.Property<string>("Name");

                    b.Property<string>("Photos");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.ToTable("TourDay");
                });

            modelBuilder.Entity("PT.Domain.Model.TourDayGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image1");

                    b.Property<string>("Image2");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.Property<int>("TourDayId");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.ToTable("TourDayGallery");
                });

            modelBuilder.Entity("PT.Domain.Model.TourGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image1");

                    b.Property<string>("Image2");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.Property<int>("TourId");

                    b.HasKey("Id");

                    b.ToTable("TourGallery");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PT.Domain.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PT.Domain.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PT.Domain.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PT.Domain.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PT.Domain.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PT.Domain.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PT.Domain.Model.RoleAction", b =>
                {
                    b.HasOne("PT.Domain.Model.RoleController", "RoleController")
                        .WithMany()
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PT.Domain.Model.RoleController", b =>
                {
                    b.HasOne("PT.Domain.Model.RoleArea", "RoleArea")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PT.Domain.Model.RoleGroup", "RoleGroups")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PT.Domain.Model.RoleDetail", b =>
                {
                    b.HasOne("PT.Domain.Model.RoleAction", "RoleAction")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PT.Domain.Model.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
